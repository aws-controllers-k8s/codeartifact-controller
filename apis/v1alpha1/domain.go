// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DomainSpec defines the desired state of Domain.
type DomainSpec struct {

	// The encryption key for the domain. This is used to encrypt content stored
	// in a domain. An encryption key can be a key ID, a key Amazon Resource Name
	// (ARN), a key alias, or a key alias ARN. To specify an encryptionKey, your
	// IAM role must have kms:DescribeKey and kms:CreateGrant permissions on the
	// encryption key that is used. For more information, see DescribeKey (https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax)
	// in the Key Management Service API Reference and Key Management Service API
	// Permissions Reference (https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
	// in the Key Management Service Developer Guide.
	//
	// CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric
	// CMK with your domain. For more information, see Using symmetric and asymmetric
	// keys (https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html)
	// in the Key Management Service Developer Guide.
	//
	// Regex Pattern: `^\S+$`
	EncryptionKey *string `json:"encryptionKey,omitempty"`
	// The name of the domain to create. All domain names in an Amazon Web Services
	// Region that are in the same Amazon Web Services account must be unique. The
	// domain name is used as the prefix in DNS hostnames. Do not use sensitive
	// information in a domain name because it is publicly discoverable.
	//
	// Regex Pattern: `^[a-z][a-z0-9\-]{0,48}[a-z0-9]$`
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// One or more tag key-value pairs for the domain.
	Tags []*Tag `json:"tags,omitempty"`
}

// DomainStatus defines the observed state of Domain
type DomainStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The total size of all assets in the domain.
	// +kubebuilder:validation:Optional
	AssetSizeBytes *int64 `json:"assetSizeBytes,omitempty"`
	// A timestamp that represents the date and time the domain was created.
	// +kubebuilder:validation:Optional
	CreatedTime *metav1.Time `json:"createdTime,omitempty"`
	// The Amazon Web Services account ID that owns the domain.
	//
	// Regex Pattern: `^[0-9]{12}$`
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty"`
	// The number of repositories in the domain.
	// +kubebuilder:validation:Optional
	RepositoryCount *int64 `json:"repositoryCount,omitempty"`
	// The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store
	// package assets in the domain.
	//
	// Regex Pattern: `^\S+$`
	// +kubebuilder:validation:Optional
	S3BucketARN *string `json:"s3BucketARN,omitempty"`
	// The current status of a domain.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// Domain is the Schema for the Domains API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec,omitempty"`
	Status            DomainStatus `json:"status,omitempty"`
}

// DomainList contains a list of Domain
// +kubebuilder:object:root=true
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
